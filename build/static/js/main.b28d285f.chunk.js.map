{"version":3,"sources":["components/Messages/Messages.js","components/Messages/index.js","components/LoginForm/LoginForm.js","components/LoginForm/index.js","App.js","serviceWorker.js","index.js","services/chatapi.js","components/Calculator/Calculator.js","components/Button/ButtonComponent.js","components/Display/Display.js","utils/common.js"],"names":["Messages","messages","currentUser","className","map","msg","message","sender","content","color","username","key","id","style","backgroundColor","renderMessage","LoginForm","onSubmit","useState","setUsername","handleSubmit","TextField","label","placeholder","onChange","event","target","value","margin","onKeyPress","Button","variant","onClick","App","Calculator","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","api","Axios","create","baseURL","host","chatAPI","getMessages","log","get","sendMessage","text","post","SOCKET_URL","setMessages","user","setUser","result","setResult","onConnected","onMessageReceived","res","data","err","onSendMessage","msgText","handleLoginSubmit","randomColor","button","calculate","reset","backspace","slice","eval","expression","e","lg","url","topics","onConnect","onMessage","debug","sm","display","ButtonComponent","isOperator","val","isNaN","name","props","Component","Display","state","width","divRef","React","createRef","spanRef","previousWidth","this","setState","innerWidth","addEventListener","updateDimensions","bind","removeEventListener","parseFloat","getComputedStyle","current","getPropertyValue","clientWidth","fontSize","getFontSize","reduceFontSize","ref","divWidth","resetFontSize","Math","floor","random","toString"],"mappings":"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","file":"static/js/main.b28d285f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Messages = ({ messages, currentUser }) => {\n\n    let renderMessage = (message) => {\n        const { sender, content, color } = message;\n        const messageFromMe = currentUser.username === message.sender;\n        const className = messageFromMe ? \"Messages-message currentUser\" : \"Messages-message\";\n        return (\n            <li className={className} key={message.id}>\n                <span\n                    className=\"avatar\"\n                    style={{ backgroundColor: color }}\n                />\n                <div className=\"Message-content\">\n                    <div className=\"username\">\n                        {sender}\n                    </div>\n                    <div className=\"text\">{content}</div>\n                </div>\n            </li>\n        );\n    };\n\n    return (\n        <ul className=\"messages-list\">\n            {messages.map(msg => renderMessage(msg))}\n        </ul>\n    )\n}\n\n\nexport default Messages","import Messages from './Messages';\n\nexport default Messages;\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst LoginForm = ({ onSubmit }) => {\n\n    const [username, setUsername] = useState(\"\");\n    let handleUserNameChange = event => setUsername(event.target.value);\n\n    let handleSubmit = () => {\n        onSubmit(username);\n    }\n\n    return (\n        <div>\n            <TextField\n                label=\"Type your username\"\n                placeholder=\"Username\"\n                onChange={handleUserNameChange}\n                margin=\"normal\"\n                onKeyPress={event => {\n                    if (event.key === 'Enter') {\n                        handleSubmit();\n                    }\n                }}\n            />\n            <br />\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit} >\n                Login\n             </Button>\n\n        </div>\n    )\n}\n\nexport default LoginForm\n","import LoginForm from \"./LoginForm\"\n\nexport default LoginForm;\n","import React from 'react';\n\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Calculator from \"./components/Calculator/Calculator\";\n\n\n\n\nconst App = () => {\n\n\n\n\n  return (\n      <div className=\"App\">\n        <Calculator/>\n      </div>\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Axios from \"axios\";\n\nconst api = Axios.create({\n    baseURL: '/api/',\n});\nconst host = Axios.create({\n    baseURL: 'http://localhost:8080/',\n});\n\nconst chatAPI = {\n    getMessages: () => {\n        console.log('Calling get messages from API');\n        return host.get(`chat/getPrevious`);\n    },\n\n    sendMessage: (username, text) => {\n        let msg = {\n            sender: username,\n            content: text\n        }\n        return api.post(`send`, msg);\n    }\n}\n\n\nexport default chatAPI;\n","import React, { useState } from 'react';\r\n\r\nimport ButtonComponent from \"../Button/ButtonComponent\";\r\nimport Display from \"../Display/Display\";\r\nimport \"./Calculator.css\"\r\nimport chatAPI from \"../../services/chatapi\";\r\nimport {randomColor} from \"../../utils/common\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport SockJsClient from \"react-stomp\";\r\nimport Messages from \"../Messages\";\r\n\r\nimport LoginForm from \"../LoginForm\";\r\n\r\n\r\nconst SOCKET_URL = 'http://localhost:8080/ws-chat/';\r\n\r\n\r\nconst Calculator =()=> {\r\n    //state will store the most recent 10 calculations\r\n    //currentCalc is a display state piece that changes as each new character is added\r\n    const [messages, setMessages] = useState([])\r\n    const [user, setUser] = useState(null)\r\n    const [result,setResult]=useState(\"\")\r\n\r\n\r\n    let onConnected = () => {\r\n        console.log(\"Connected!!\")\r\n    }\r\n\r\n    let onMessageReceived = (msg) => {\r\n        chatAPI.getMessages().then(res => {\r\n            setMessages(res.data);\r\n        }).catch(err => {\r\n            console.log('Error Occured while sending message to api');\r\n        })\r\n        //setMessages(messages.concat(msg));\r\n    }\r\n\r\n    let onSendMessage = (msgText) => {\r\n        chatAPI.sendMessage(user.username, msgText).then(res => {\r\n\r\n        }).catch(err => {\r\n            console.log('Error Occured while sending message to api');\r\n        })\r\n    }\r\n\r\n    let handleLoginSubmit = (username) => {\r\n\r\n\r\n        setUser({\r\n            username: username,\r\n            color: randomColor()\r\n        })\r\n\r\n    }\r\n\r\n    let onClick = button => {\r\n\r\n        if(button === \"=\"){\r\n            calculate()\r\n            reset()\r\n        }\r\n\r\n        else if(button === \"C\"){\r\n            reset()\r\n        }\r\n        else if(button === \"CE\"){\r\n            backspace()\r\n        }\r\n\r\n        else {\r\n            setResult(result + button)\r\n        }\r\n    };\r\n    let reset = () => {\r\n        setResult(\"\");\r\n    };\r\n\r\n    let backspace = () => {\r\n        setResult(result.slice(0, -1))\r\n    };\r\n    let calculate = () => {\r\n        try {\r\n            if(result !== \"\")\r\n            {// eslint-disable-next-line\r\n                setResult( (eval(result) || \"\" ) + \"\"\r\n                )\r\n                // eslint-disable-next-line\r\n                let expression = result + \"=\"+ eval(result);\r\n                onSendMessage(expression);\r\n\r\n            }\r\n        } catch (e) {\r\n            setResult(\"error\")\r\n\r\n        }\r\n\r\n\r\n    };\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row className=\"rows\">\r\n                        <Col className=\"columns\" lg={12} >\r\n                            <h1 className=\"App-header\">Sezzle App</h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"rows\">\r\n                        {!!user ?\r\n                            (\r\n                                <>\r\n\r\n                                    <SockJsClient\r\n                                        url={SOCKET_URL}\r\n                                        topics={['/topic/group']}\r\n                                        onConnect={onConnected}\r\n                                        onMessage={msg=>onMessageReceived(msg)}\r\n                                        debug={false}\r\n                                    />\r\n                                    <Col className=\"columns\" lg={6} sm={12}>\r\n\r\n                                        <h2>Calculator</h2>\r\n                                        <div className=\"Calculator\">\r\n                                            <Display display={result}/>\r\n                                            <ButtonComponent onClick={onClick}/>\r\n                                        </div>\r\n                                    </Col>\r\n                                    <Col className=\"columns\" lg={6} sm={12}>\r\n                                        <h2>Chats</h2>\r\n                                        <Messages\r\n                                            messages={messages}\r\n                                            currentUser={user}\r\n                                        />\r\n                                    </Col>\r\n                                </>\r\n                            ) :\r\n                            <Col className=\"columns\" lg={12} >\r\n                                <LoginForm onSubmit={handleLoginSubmit} />\r\n                            </Col>\r\n\r\n                        }\r\n\r\n                    </Row>\r\n                </Container>\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n\r\n}\r\n\r\nexport default Calculator;","import React, {Component} from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport \"./Button.css\";\r\n\r\nclass ButtonComponent extends Component {\r\n    isOperator = val => {\r\n        return !isNaN(val) || val === '.' || val === '=';\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <Button className=\"operator Button GrayButton\" name=\"C\" onClick={e => this.props.onClick(e.target.name)}>C</Button>\r\n                <Button className=\"operator Button GrayButton\" name=\"CE\" onClick={e => this.props.onClick(e.target.name)}>CE</Button>\r\n                <Button className=\"operator Button GrayButton \" name=\"(\" onClick={e => this.props.onClick(e.target.name)}>(</Button>\r\n                <Button className=\"operator Button GrayButton\" name=\")\" onClick={e => this.props.onClick(e.target.name)}>)</Button>\r\n                <br/>\r\n\r\n                <Button className=\"Button BlackButton\" name=\"7\" onClick={e => this.props.onClick(e.target.name)}>7</Button>\r\n                <Button className=\"Button BlackButton\" name=\"8\" onClick={e => this.props.onClick(e.target.name)}>8</Button>\r\n                <Button className=\"Button BlackButton\" name=\"9\" onClick={e => this.props.onClick(e.target.name)}>9</Button>\r\n                <Button className=\"operator Button OrangeButton\" name=\"*\" onClick={e => this.props.onClick(e.target.name)}>x</Button><br/>\r\n\r\n                <Button className=\"Button BlackButton\" name=\"4\" onClick={e => this.props.onClick(e.target.name)}>4</Button>\r\n                <Button className=\"Button BlackButton\" name=\"5\" onClick={e => this.props.onClick(e.target.name)}>5</Button>\r\n                <Button className=\"Button BlackButton\" name=\"6\" onClick={e => this.props.onClick(e.target.name)}>6</Button>\r\n                <Button className=\"operator Button OrangeButton\" name=\"-\" onClick={e => this.props.onClick(e.target.name)}>-</Button><br/>\r\n\r\n                <Button  className=\"Button BlackButton\" name=\"1\" onClick={e => this.props.onClick(e.target.name)}>1</Button>\r\n                <Button className=\"Button BlackButton\" name=\"2\" onClick={e => this.props.onClick(e.target.name)}>2</Button>\r\n                <Button name=\"3\" className=\"Button BlackButton\"  onClick={e => this.props.onClick(e.target.name)}>3</Button>\r\n                <Button className=\"operator Button OrangeButton\" name=\"+\" onClick={e => this.props.onClick(e.target.name)}>+</Button><br/>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <Button className=\"operator Button GrayButton\" name=\".\" onClick={e => this.props.onClick(e.target.name)}>.</Button>\r\n                <Button className=\"Button BlackButton\" name=\"0\" onClick={e => this.props.onClick(e.target.name)}>0</Button>\r\n                <Button className=\"operator Button GrayButton\" name=\"=\" onClick={e => this.props.onClick(e.target.name)}>=</Button>\r\n                <Button className=\"operator Button OrangeButton\" name=\"/\" onClick={e => this.props.onClick(e.target.name)}>÷</Button><br/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ButtonComponent;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Display.css\";\r\n\r\nclass Display extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { display: props.display, width: window.width };\r\n\r\n        this.divRef = React.createRef();\r\n        this.spanRef = React.createRef();\r\n\r\n        this.previousWidth = window.width;\r\n    }\r\n\r\n    updateDimensions() {\r\n        this.setState({ ...this.state, width: window.innerWidth });\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.updateDimensions.bind(this));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\r\n    }\r\n\r\n    getFontSize() {\r\n        return parseFloat(\r\n            window\r\n                .getComputedStyle(this.divRef.current, null)\r\n                .getPropertyValue(\"font-size\")\r\n        );\r\n    }\r\n\r\n    reduceFontSize() {\r\n        if (\r\n            this.divRef.current.clientWidth >\r\n            this.spanRef.current.clientWidth + 40\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.divRef.current.style.fontSize = this.getFontSize() - 10 + \"px\";\r\n\r\n        this.reduceFontSize();\r\n    }\r\n\r\n    resetFontSize() {\r\n        this.divRef.current.style.fontSize = \"14vmin\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.divRef} className=\"Display\">\r\n        <span ref={this.spanRef} className=\"DisplaySpan\">\r\n          {this.props.display}\r\n        </span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        let divWidth = this.divRef.current.clientWidth;\r\n\r\n        this.resetFontSize();\r\n        this.reduceFontSize();\r\n\r\n        this.previousWidth = divWidth;\r\n    }\r\n}\r\n\r\nDisplay.propTypes = {\r\n    display: PropTypes.string,\r\n};\r\n\r\nexport default Display;","export function randomColor() {\n    return '#' + Math.floor(Math.random() * 0xFFFFFF).toString(16);\n}\n"],"sourceRoot":""}